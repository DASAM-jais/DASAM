{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "01acb14c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.interpolate import griddata\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import scipy.stats as stats\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "from statsmodels.formula.api import ols\n",
    "from scipy.stats import levene\n",
    "from scipy.stats import kstest\n",
    "from statsmodels.stats.anova import anova_lm#方差分析\n",
    "from statsmodels.stats.multicomp import pairwise_tukeyhsd#两两比较\n",
    "from scipy.stats import ttest_rel#配对样本t检验\n",
    "import pingouin as pg\n",
    "import re\n",
    "from scipy.optimize import curve_fit\n",
    "import palettable\n",
    "from palettable.cartocolors.qualitative import Bold_9\n",
    "\n",
    "# matplotlib 图形正常显示中文及负号\n",
    "plt.rcParams['font.sans-serif'] = ['SimHei']   # 用来正常显示中文标签\n",
    "plt.rcParams['axes.unicode_minus'] = False    # 用来正常显示负号\n",
    "parameters = {'axes.labelsize': 15,\n",
    "          'axes.titlesize': 20,'xtick.labelsize':13,'ytick.labelsize':13}\n",
    "plt.rcParams.update(parameters)\n",
    "#3d绘图内嵌可旋转\n",
    "#%matplotlib notebook\n",
    "#3d绘图单独窗口\n",
    "%matplotlib qt5\n",
    "%config InlineBackend.figure_format = 'svg'#矢量图设置，设定显示图片的分辨率\n",
    "\n",
    "pd.set_option('display.max_rows',500)\n",
    "pd.set_option('display.max_columns',500)\n",
    "pd.set_option('display.width',1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "69cea70d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['step', '提供方1类型', '提供方2类型', '提供方1利他程度', '提供方2利他程度', 'OP1', 'OP2', 'PCIP1', 'PCIP2', 'ARPP1', 'ARPP2', 'ARSP1', 'ARSP2', '服务人数1', '服务人数2', '总服务人数', '评论1', '评论2', '社会总福利', '平台收益', '提供方收益1', '提供方收益2', '提供方总收益', '消费者收益1', '消费者收益2', '消费者总收益', '消费者满意度1', '消费者满意度2', '消费者总满意度', '消费者剩余1', '消费者剩余2', '消费者总剩余', '实际到达人数', '办理入住数1', '办理入住数2', '办理入住总数', '被激励好评数量1', '被激励好评数量2', '获得激励数量1', '获得激励数量2', '好评占比1', '好评占比2', '总好评数量占比', 'PERP1', 'PERP2', 'random_seed', 'PCIP', 'OP', 'PERP', 'ARPP', 'ARSP', '平均毛利率', '平均净利率', '毛利率1', '毛利率2', '净利率1', '净利率2', '消费者平均收益1', '消费者平均收益2', '评论1_当期', '评论2_当期', '评论1_lag1', '评论2_lag1', '总评论数量1', '总评论数量2', '总评论数量', '好评数量1', '好评数量2', '好评总数', '当期好评占比1', '当期好评占比2', '被激励好评占好评比例1', '被激励好评占好评比例2', '被激励好评占好评比例', '获得激励评论数量占评论比例1', '获得激励评论数量占评论比例2', '获得激励评论数量占评论比例', 'RP1', 'RP2', 'RP1_', 'RP2_', 'val1', 'expect1', 'val2', 'expect2', 'market_type'], dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.read_csv(r'C:\\Users\\11054\\.spyder-py3\\my_project\\在线评论\\在线评论-2024-9-14\\数据-2024-9-14\\data_all_processing.csv')\n",
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0787a2f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = ['step', '提供方1类型', '提供方2类型', '提供方1利他程度', '提供方2利他程度', '夸大宣传程度1',\n",
    "               '夸大宣传程度2', '好评激励1', '好评激励2',\n",
    "               '价格1', '价格2', '服务质量1', '服务质量2', '服务人数1', '服务人数2', '总服务人数', '评论1', '评论2',\n",
    "               '社会总福利', '平台收益', '提供方收益1', '提供方收益2', '提供方总收益', '消费者收益1', '消费者收益2',\n",
    "               '消费者总收益', '消费者满意度1', '消费者满意度2', '消费者总满意度','消费者剩余1', '消费者剩余2', '消费者总剩余',\n",
    "               '实际到达人数', '办理入住数1', '办理入住数2', '办理入住总数', '被激励好评数量1', '被激励好评数量2',\n",
    "               '获得激励数量1', '获得激励数量2',\n",
    "               '好评占比1', '好评占比2', '总好评数量占比']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b2547b5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OP1</th>\n",
       "      <th>PCIP1</th>\n",
       "      <th>ARPP1</th>\n",
       "      <th>ARSP1</th>\n",
       "      <th>OP2</th>\n",
       "      <th>PCIP2</th>\n",
       "      <th>ARPP2</th>\n",
       "      <th>ARSP2</th>\n",
       "      <th>OP</th>\n",
       "      <th>PCIP</th>\n",
       "      <th>ARPP</th>\n",
       "      <th>ARSP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "      <td>891000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.030947</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000244</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000586</td>\n",
       "      <td>0.00033</td>\n",
       "      <td>0.035891</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.075311</td>\n",
       "      <td>0.023223</td>\n",
       "      <td>0.364646</td>\n",
       "      <td>0.078313</td>\n",
       "      <td>0.039048</td>\n",
       "      <td>0.068278</td>\n",
       "      <td>0.228102</td>\n",
       "      <td>0.04169</td>\n",
       "      <td>0.092637</td>\n",
       "      <td>0.066081</td>\n",
       "      <td>0.377525</td>\n",
       "      <td>0.122383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.156117</td>\n",
       "      <td>0.057289</td>\n",
       "      <td>0.540621</td>\n",
       "      <td>0.25148</td>\n",
       "      <td>0.102784</td>\n",
       "      <td>0.134286</td>\n",
       "      <td>0.396997</td>\n",
       "      <td>0.129586</td>\n",
       "      <td>0.137033</td>\n",
       "      <td>0.104615</td>\n",
       "      <td>0.496063</td>\n",
       "      <td>0.211256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.238022</td>\n",
       "      <td>0.111429</td>\n",
       "      <td>0.716841</td>\n",
       "      <td>0.402612</td>\n",
       "      <td>0.194945</td>\n",
       "      <td>0.211648</td>\n",
       "      <td>0.635476</td>\n",
       "      <td>0.28377</td>\n",
       "      <td>0.179084</td>\n",
       "      <td>0.147253</td>\n",
       "      <td>0.616188</td>\n",
       "      <td>0.309315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.3</td>\n",
       "      <td>0.299853</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.846731</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.865165</td>\n",
       "      <td>0.298278</td>\n",
       "      <td>0.298755</td>\n",
       "      <td>0.989044</td>\n",
       "      <td>0.728896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean(std)</th>\n",
       "      <td>0.155(0.089)</td>\n",
       "      <td>0.076(0.066)</td>\n",
       "      <td>0.549(0.215)</td>\n",
       "      <td>0.257(0.197)</td>\n",
       "      <td>0.120(0.089)</td>\n",
       "      <td>0.140(0.085)</td>\n",
       "      <td>0.444(0.268)</td>\n",
       "      <td>0.185(0.173)</td>\n",
       "      <td>0.137(0.063)</td>\n",
       "      <td>0.108(0.053)</td>\n",
       "      <td>0.496(0.164)</td>\n",
       "      <td>0.221(0.128)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    OP1         PCIP1         ARPP1         ARSP1           OP2         PCIP2         ARPP2         ARSP2            OP          PCIP          ARPP          ARSP\n",
       "count          891000.0      891000.0      891000.0      891000.0      891000.0      891000.0      891000.0      891000.0      891000.0      891000.0      891000.0      891000.0\n",
       "min                 0.0           0.0      0.030947           0.0           0.0           0.0      0.000244           0.0      0.000586       0.00033      0.035891           0.0\n",
       "25%            0.075311      0.023223      0.364646      0.078313      0.039048      0.068278      0.228102       0.04169      0.092637      0.066081      0.377525      0.122383\n",
       "50%            0.156117      0.057289      0.540621       0.25148      0.102784      0.134286      0.396997      0.129586      0.137033      0.104615      0.496063      0.211256\n",
       "75%            0.238022      0.111429      0.716841      0.402612      0.194945      0.211648      0.635476       0.28377      0.179084      0.147253      0.616188      0.309315\n",
       "max                 0.3      0.299853           1.0      0.846731           0.3           0.3           1.0      0.865165      0.298278      0.298755      0.989044      0.728896\n",
       "mean(std)  0.155(0.089)  0.076(0.066)  0.549(0.215)  0.257(0.197)  0.120(0.089)  0.140(0.085)  0.444(0.268)  0.185(0.173)  0.137(0.063)  0.108(0.053)  0.496(0.164)  0.221(0.128)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_outliers_3sigma_multi(df, columns):\n",
    "    df_filtered = df.copy()\n",
    "    for column in columns:\n",
    "        mean = df_filtered[column].mean()\n",
    "        std = df_filtered[column].std()\n",
    "        \n",
    "        # Apply the 3-sigma rule to filter out outliers for each column\n",
    "        df_filtered = df_filtered[(df_filtered[column] >= mean - 6 * std) & (df_filtered[column] <= mean + 6 * std)]\n",
    "    return df_filtered\n",
    "\n",
    "data['消费者平均满意度']=(data['消费者满意度1']+data['消费者满意度2'])/(data['服务人数1']+data['服务人数2'])\n",
    "data['消费者平均收益']=(data['消费者收益1']+data['消费者收益2'])/(data['服务人数1']+data['服务人数2'])\n",
    "data['消费者平均收益1']=data['消费者收益1']/data['服务人数1']\n",
    "data['消费者平均收益2']=data['消费者收益2']/data['服务人数2']\n",
    "data['RP_']=(data['RP1_']+data['RP2_'])/2\n",
    "df=data[data['market_type']=='hybrid']\n",
    "columns=['OP1','PCIP1','ARPP1','ARSP1','OP2','PCIP2','ARPP2','ARSP2','OP','PCIP','ARPP','ARSP']#['平台收益','提供方收益1','提供方收益2','提供方总收益','消费者平均收益1','消费者平均收益2','消费者平均收益','消费者平均满意度','社会总福利','总服务人数','RP_']\n",
    "df=remove_outliers_3sigma_multi(df,columns)\n",
    "desc = df[columns].describe()\n",
    "# Combine mean and std into the format 'mean(std)'\n",
    "for col in columns:\n",
    "    mean = desc.loc['mean', col]\n",
    "    std = desc.loc['std', col]\n",
    "    desc.at['mean(std)', col] = f\"{mean:.3f}({std:.3f})\"\n",
    "\n",
    "# Drop the original mean and std rows\n",
    "desc = desc.drop(['mean', 'std'])\n",
    "desc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8942ac6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RP_的方差齐性检验结果为 LeveneResult(statistic=118314.8455194288, pvalue=0.0)\n",
      "        Source  ddof1         ddof2             F  p-unc       np2\n",
      "0  market_type      2  1.644146e+06  3.652698e+06    0.0  0.709179\n",
      "多重比较：\n",
      "               A              B   mean(A)   mean(B)      diff        se            T            df  pval    hedges\n",
      "0         hybrid  pure-altruism  0.891575  1.081590 -0.190014  0.000121 -1572.310600  1.536674e+06   0.0 -2.355669\n",
      "1         hybrid    pure-egoism  0.891575  0.704368  0.187207  0.000168  1111.621092  1.653047e+06   0.0  1.665454\n",
      "2  pure-altruism    pure-egoism  1.081590  0.704368  0.377222  0.000150  2513.347172  1.297924e+06   0.0  3.765550\n"
     ]
    }
   ],
   "source": [
    "anova_d('RP_',data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0d2453c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def anova_d(column,data):\n",
    "    gb=data.groupby('market_type')\n",
    "    groups=[]\n",
    "    for a,group in gb:\n",
    "        groups.append(group[column])\n",
    "    l=levene(*groups)\n",
    "    print(column+'的方差齐性检验结果为',l)\n",
    "    if l.pvalue>0.05:\n",
    "        formula = column+\"~ C(market_type)\"\n",
    "        model=anova_lm(ols(formula,data=data).fit())\n",
    "        print(model)\n",
    "        re=pairwise_tukeyhsd(data[column],data['market_type'],alpha=0.05)\n",
    "        print('多重比较：')\n",
    "        print(re.summary())\n",
    "    else:\n",
    "        model=pg.welch_anova(dv=column, between='market_type', data=data)\n",
    "        print(model)\n",
    "        print('多重比较：')\n",
    "        print(pg.pairwise_gameshowell(dv=column, between='market_type', data=data))\n",
    "        \n",
    "def anova_h(column,sm_all):\n",
    "    sm_2=sm_all[sm_all.market_type=='hybrid']\n",
    "    gb=sm_2.groupby('s_num')\n",
    "    groups=[]\n",
    "    for a,group in gb:\n",
    "        groups.append(group[column])\n",
    "    l=levene(*groups)\n",
    "    print(column+'的方差齐性检验结果为',l)\n",
    "    if l.pvalue>0.05:\n",
    "        formula =column+ '~ C(s_num)'\n",
    "        model=anova_lm(ols(formula,data=sm_2).fit())\n",
    "        print(model)\n",
    "        re=pairwise_tukeyhsd(sm_2[column],sm_2['s_num'],alpha=0.05)\n",
    "        print('多重比较：')\n",
    "        print(re.summary())\n",
    "    else:\n",
    "        model=pg.welch_anova(dv=column, between='s_num', data=sm_2)\n",
    "        print(model)\n",
    "        print('多重比较：')\n",
    "        print(pg.pairwise_gameshowell(dv=column, between='s_num', data=sm_2))\n",
    "        \n",
    "def anova_ph(column,sm_2):\n",
    "    gb=sm_2.groupby('s_num')\n",
    "    groups=[]\n",
    "    for a,group in gb:\n",
    "        groups.append(group[column])\n",
    "    l=levene(*groups)\n",
    "    print(column+'的方差齐性检验结果为',l)\n",
    "    if l.pvalue>0.05:\n",
    "        formula =column+ '~ C(s_num)'\n",
    "        model=anova_lm(ols(formula,data=sm_2).fit())\n",
    "        print(model)\n",
    "        re=pairwise_tukeyhsd(sm_2[column],sm_2['s_num'],alpha=0.05)\n",
    "        print('多重比较：')\n",
    "        print(re.summary())\n",
    "    else:\n",
    "        model=pg.welch_anova(dv=column, between='s_num', data=sm_2)\n",
    "        print(model)\n",
    "        print('多重比较：')\n",
    "        print(pg.pairwise_gameshowell(dv=column, between='s_num', data=sm_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba0a440c",
   "metadata": {},
   "source": [
    "# 验证与确认"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15c1f4c4",
   "metadata": {},
   "source": [
    "### 不同市场下平均好评激励金额不同"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e9673ed5",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv(r'C:\\Users\\11054\\.spyder-py3\\my_project\\在线评论\\在线评论-2024-9-14\\数据-2024-9-14\\data_all_processing.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "724eeb9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>总服务人数</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>252.695627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>35.481652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>23.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>252.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>264.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>273.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>315.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               总服务人数\n",
       "count  891000.000000\n",
       "mean      252.695627\n",
       "std        35.481652\n",
       "min        23.000000\n",
       "25%       252.000000\n",
       "50%       264.000000\n",
       "75%       273.000000\n",
       "max       315.000000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['market_type']=='pure-altruism'][['总服务人数']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1fb111ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='market_type', ylabel='PCIP'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.boxplot(x = 'market_type', y = 'PCIP',data = data, showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ff272360",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCIP的方差齐性检验结果为 LeveneResult(statistic=5965.939812306917, pvalue=0.0)\n",
      "        Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  market_type      2  233591.611317  70285.030508    0.0  0.238878\n",
      "多重比较：\n",
      "               A              B   mean(A)   mean(B)      diff        se           T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  0.107989  0.142775 -0.034786  0.000228 -152.601074  198079.107659   0.0 -0.601935\n",
      "1         hybrid    pure-egoism  0.107989  0.075643  0.032346  0.000210  154.218339  158819.530131   0.0  0.661282\n",
      "2  pure-altruism    pure-egoism  0.142775  0.075643  0.067132  0.000180  373.239838  335987.643261   0.0  1.250398\n"
     ]
    }
   ],
   "source": [
    "column='PCIP'\n",
    "anova_d(column,data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ebffa86",
   "metadata": {},
   "source": [
    "### 混合市场下，两个提供方间好评激励决策的比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "55d085dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='s_num', ylabel='PCIP'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#方差分析\n",
    "sm1=pd.DataFrame(data[['PCIP1','market_type']])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[['PCIP2','market_type']])\n",
    "sm2['s_num']=2\n",
    "sm1=sm1.rename(columns={'PCIP1':'PCIP'})\n",
    "sm2=sm2.rename(columns={'PCIP2':'PCIP'})\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "sns.boxplot(x = 's_num', y = 'PCIP', data = sm_all[sm_all.market_type=='hybrid'], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6f50b4c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCIP的方差齐性检验结果为 LeveneResult(statistic=94404.6939402063, pvalue=0.0)\n",
      "  Source  ddof1         ddof2             F  p-unc       np2\n",
      "0  s_num      1  1.684468e+06  308893.87316    0.0  0.147733\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)    diff        se           T            df  pval    hedges\n",
      "0  1  2  0.076204  0.139705 -0.0635  0.000114 -555.782217  1.684468e+06   0.0 -0.832685\n"
     ]
    }
   ],
   "source": [
    "column='PCIP'\n",
    "anova_h(column,sm_all)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c2a2640f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='s_num', ylabel='PCIP'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#两配对样本t检验\n",
    "sns.violinplot(x = 's_num', y = column, data = sm_all[sm_all.market_type=='hybrid'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ac542664",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TtestResult(statistic=-173.18698076242734, pvalue=0.0, df=89099)\n",
      "                 T    dof alternative  p-val           CI95%   cohen-d BF10  power\n",
      "T-test -173.186981  89099   two-sided    0.0  [-0.06, -0.06]  0.831086  inf    1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\D\\anaconda\\Lib\\site-packages\\pingouin\\bayesian.py:152: RuntimeWarning: divide by zero encountered in scalar divide\n",
      "  bf10 = 1 / ((1 + t**2 / df) ** (-(df + 1) / 2) / integr)\n"
     ]
    }
   ],
   "source": [
    "#配对样本t检验\n",
    "print(ttest_rel(data[data['market_type']=='hybrid']['PCIP1'],data[data['market_type']=='hybrid']['PCIP2']))\n",
    "print(pg.ttest(data[data['market_type']=='hybrid']['PCIP1'],data[data['market_type']=='hybrid']['PCIP2'], paired=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b9eebfb",
   "metadata": {},
   "source": [
    "### 跨市场比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b38ed6aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCIP的方差齐性检验结果为 LeveneResult(statistic=5.210016960912059, pvalue=0.02245992470399829)\n",
      "  Source  ddof1         ddof2         F     p-unc       np2\n",
      "0  s_num      1  50265.430093  0.982291  0.321639  0.000013\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff       se         T            df      pval    hedges\n",
      "0  0  1  0.075173  0.075688 -0.000516  0.00052 -0.991106  50265.430093  0.321639 -0.007654\n",
      "PCIP的方差齐性检验结果为 LeveneResult(statistic=2.224606348197071, pvalue=0.13583170885484874)\n",
      "               df      sum_sq   mean_sq         F    PR(>F)\n",
      "C(s_num)      1.0    0.073935  0.073935  10.14104  0.001451\n",
      "Residual  71101.0  518.372979  0.007291       NaN       NaN\n",
      "多重比较：\n",
      "Multiple Comparison of Means - Tukey HSD, FWER=0.05\n",
      "==================================================\n",
      "group1 group2 meandiff p-adj  lower  upper  reject\n",
      "--------------------------------------------------\n",
      "     1      2   0.0021 0.0015 0.0008 0.0035   True\n",
      "--------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "#方差分析\n",
    "def cross_market_compare(column_str):\n",
    "    sm1=pd.DataFrame(data[data['market_type']=='pure-egoism'][[column_str+'1']])\n",
    "    sm1['s_num']=0\n",
    "    sm2=pd.DataFrame(data[data['market_type']=='hybrid'][[column_str+'1']])\n",
    "    sm2['s_num']=1\n",
    "    sm1=sm1.rename(columns={column_str+'1':column_str})\n",
    "    sm2=sm2.rename(columns={column_str+'1':column_str})\n",
    "    sm_all=pd.concat([sm1,sm2])\n",
    "    column=column_str\n",
    "    anova_ph(column,sm_all)\n",
    "    fig,axes=plt.subplots(1,2,figsize=(8,3),sharey=True)\n",
    "    sns.boxplot(x = 's_num', y = column_str, data = sm_all,ax=axes[0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "    sm1=pd.DataFrame(data[data['market_type']=='hybrid'][[column_str+'2']])\n",
    "    sm1['s_num']=1\n",
    "    sm2=pd.DataFrame(data[data['market_type']=='pure-altruism'][[column_str+'2']])\n",
    "    sm2['s_num']=2\n",
    "    sm1=sm1.rename(columns={column_str+'2':column_str})\n",
    "    sm2=sm2.rename(columns={column_str+'2':column_str})\n",
    "    sm_all=pd.concat([sm1,sm2])\n",
    "    column=column_str\n",
    "    anova_ph(column,sm_all)\n",
    "    sns.boxplot(x = 's_num', y = column_str, data = sm_all,ax=axes[1], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "cross_market_compare('PCIP')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa4169b0",
   "metadata": {},
   "source": [
    "### 不同市场下平均夸大宣传程度"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "51f3195d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='market_type', ylabel='OP'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sns.boxplot(x = 'market_type', y = 'OP', data = data, showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3ba60289",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OP的方差齐性检验结果为 LeveneResult(statistic=28.120679786006395, pvalue=6.139242163834169e-13)\n",
      "        Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  market_type      2  238248.867858  10759.534399    0.0  0.046227\n",
      "多重比较：\n",
      "               A              B   mean(A)  mean(B)      diff        se           T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  0.136942  0.12135  0.015592  0.000258   60.346655  178997.695085   0.0  0.247190\n",
      "1         hybrid    pure-egoism  0.136942  0.15251 -0.015569  0.000259  -60.112801  180126.016141   0.0 -0.245653\n",
      "2  pure-altruism    pure-egoism  0.121350  0.15251 -0.031161  0.000212 -146.693091  356380.252653   0.0 -0.491439\n"
     ]
    }
   ],
   "source": [
    "column='OP'\n",
    "anova_d(column,data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "991b8fd5",
   "metadata": {},
   "source": [
    "### 混合市场下，两个提供方间夸大宣传程度的比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f0d4c0ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='s_num', ylabel='OP'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#方差分析\n",
    "sm1=pd.DataFrame(data[['OP1','market_type']])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[['OP2','market_type']])\n",
    "sm2['s_num']=2\n",
    "sm1=sm1.rename(columns={'OP1':'OP'})\n",
    "sm2=sm2.rename(columns={'OP2':'OP'})\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "fig,axes=plt.subplots(1,2,figsize=(8,3),sharey=True)\n",
    "sns.boxplot(x = 's_num', y = 'OP', data = sm_all[sm_all.market_type=='hybrid'],ax=axes[0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.violinplot(x = 's_num', y = 'OP', data = sm_all[sm_all.market_type=='hybrid'],ax=axes[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c6557b9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OP的方差齐性检验结果为 LeveneResult(statistic=52.56683585612653, pvalue=4.1752852927969173e-13)\n",
      "  Source  ddof1          ddof2            F  p-unc       np2\n",
      "0  s_num      1  178197.646179  6731.239754    0.0  0.036399\n",
      "多重比较：\n",
      "   A  B   mean(A)  mean(B)      diff        se          T             df  pval    hedges\n",
      "0  1  2  0.154274  0.11961  0.034664  0.000423  82.044133  178197.646179   0.0  0.388707\n",
      "TtestResult(statistic=81.79497298228681, pvalue=0.0, df=89099)\n",
      "                T    dof alternative  p-val           CI95%   cohen-d BF10  power\n",
      "T-test -81.794973  89099   two-sided    0.0  [-0.04, -0.03]  0.388708  inf    1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\D\\anaconda\\Lib\\site-packages\\pingouin\\bayesian.py:152: RuntimeWarning: divide by zero encountered in scalar divide\n",
      "  bf10 = 1 / ((1 + t**2 / df) ** (-(df + 1) / 2) / integr)\n"
     ]
    }
   ],
   "source": [
    "column='OP'\n",
    "anova_h(column,sm_all)\n",
    "print(ttest_rel(data[data['market_type']=='hybrid']['OP1'],data[data['market_type']=='hybrid']['OP2']))\n",
    "print(pg.ttest(data[data['market_type']=='hybrid']['OP2'],data[data['market_type']=='hybrid']['OP1'], paired=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f60f3a1b",
   "metadata": {},
   "source": [
    "### 跨市场比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f2247fc5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OP的方差齐性检验结果为 LeveneResult(statistic=0.3554476852375099, pvalue=0.5510472237052046)\n",
      "               df      sum_sq   mean_sq         F    PR(>F)\n",
      "C(s_num)      1.0    0.054227  0.054227  6.903581  0.008604\n",
      "Residual  74387.0  584.303160  0.007855       NaN       NaN\n",
      "多重比较：\n",
      "Multiple Comparison of Means - Tukey HSD, FWER=0.05\n",
      "==================================================\n",
      "group1 group2 meandiff p-adj  lower  upper  reject\n",
      "--------------------------------------------------\n",
      "     0      1   0.0018 0.0086 0.0005 0.0032   True\n",
      "--------------------------------------------------\n",
      "OP的方差齐性检验结果为 LeveneResult(statistic=12.691791780188918, pvalue=0.00036750424488472507)\n",
      "  Source  ddof1         ddof2         F     p-unc       np2\n",
      "0  s_num      1  50768.560733  0.526003  0.468296  0.000007\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se        T            df      pval    hedges\n",
      "0  1  2  0.119964  0.120477 -0.000513  0.000708 -0.72526  50768.560733  0.468296 -0.005693\n"
     ]
    }
   ],
   "source": [
    "cross_market_compare('OP')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5f5461d",
   "metadata": {},
   "source": [
    "### 不同市场下，提供方房间价格服务的差异"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3e5b826d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='market_type', ylabel='ARSP'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fig,axes=plt.subplots(1,2,figsize=(8,4),sharey=True)\n",
    "sns.boxplot(x = 'market_type', y = 'ARPP', data = data,ax=axes[0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.boxplot(x = 'market_type', y = 'ARSP', data = data,ax=axes[1], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "b34f2237",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ARPP的方差齐性检验结果为 LeveneResult(statistic=2382.070212246824, pvalue=0.0)\n",
      "        Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  market_type      2  232514.968805  38875.716334    0.0  0.146494\n",
      "多重比较：\n",
      "               A              B   mean(A)   mean(B)      diff        se           T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  0.496502  0.416085  0.080416  0.000675  119.086967  182647.618045   0.0  0.484132\n",
      "1         hybrid    pure-egoism  0.496502  0.561746 -0.065245  0.000643 -101.439284  159407.333651   0.0 -0.434337\n",
      "2  pure-altruism    pure-egoism  0.416085  0.561746 -0.145661  0.000523 -278.772622  348042.966146   0.0 -0.933921\n"
     ]
    }
   ],
   "source": [
    "column='ARPP'\n",
    "anova_d(column,data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "9cbd2016",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ARSP的方差齐性检验结果为 LeveneResult(statistic=657.3460996612935, pvalue=8.682153753411144e-286)\n",
      "        Source  ddof1          ddof2            F  p-unc       np2\n",
      "0  market_type      2  236894.387484  3402.669383    0.0  0.015029\n",
      "多重比较：\n",
      "               A              B   mean(A)   mean(B)      diff        se          T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  0.221689  0.204488  0.017201  0.000515  33.380548  170640.216259   0.0  0.139220\n",
      "1         hybrid    pure-egoism  0.221689  0.239708 -0.018019  0.000531 -33.909952  185219.977953   0.0 -0.137140\n",
      "2  pure-altruism    pure-egoism  0.204488  0.239708 -0.035220  0.000427 -82.455377  353395.775609   0.0 -0.276235\n"
     ]
    }
   ],
   "source": [
    "column='ARSP'\n",
    "anova_d(column,data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81350f4d",
   "metadata": {},
   "source": [
    "### 混合市场下，两个提供方房间平均价格和服务质量的比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fa8318ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ARPP的方差齐性检验结果为 LeveneResult(statistic=42656.86817696594, pvalue=0.0)\n",
      "  Source  ddof1         ddof2             F  p-unc       np2\n",
      "0  s_num      1  1.701641e+06  83777.903729    0.0  0.044902\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se           T            df  pval    hedges\n",
      "0  1  2  0.549107  0.443751  0.105356  0.000364  289.444129  1.701641e+06   0.0  0.433651\n"
     ]
    }
   ],
   "source": [
    "#方差分析\n",
    "sm1=pd.DataFrame(data[['ARPP1','market_type']])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[['ARPP2','market_type']])\n",
    "sm2['s_num']=2\n",
    "sm1=sm1.rename(columns={'ARPP1':'ARPP'})\n",
    "sm2=sm2.rename(columns={'ARPP2':'ARPP'})\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "sns.boxplot(x = 's_num', y = 'ARPP', data = sm_all[sm_all.market_type=='hybrid'], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "column='ARPP'\n",
    "anova_h(column,sm_all)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "39aac348",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ARSP的方差齐性检验结果为 LeveneResult(statistic=33354.50315671973, pvalue=0.0)\n",
      "  Source  ddof1         ddof2            F  p-unc       np2\n",
      "0  s_num      1  1.753552e+06  67596.17857    0.0  0.036546\n",
      "多重比较：\n",
      "   A  B  mean(A)   mean(B)      diff        se           T            df  pval    hedges\n",
      "0  1  2  0.25718  0.185063  0.072116  0.000277  259.992651  1.753552e+06   0.0  0.389527\n"
     ]
    }
   ],
   "source": [
    "#方差分析\n",
    "sm1=pd.DataFrame(data[['ARSP1','market_type']])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[['ARSP2','market_type']])\n",
    "sm2['s_num']=2\n",
    "sm1=sm1.rename(columns={'ARSP1':'ARSP'})\n",
    "sm2=sm2.rename(columns={'ARSP2':'ARSP'})\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "sns.boxplot(x = 's_num', y = 'ARSP', data = sm_all[sm_all.market_type=='hybrid'], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "column='ARSP'\n",
    "anova_h(column,sm_all)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f9fad6ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='s_num', ylabel='ARSP'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sm1=pd.DataFrame(data[['ARPP1','ARSP1','market_type']])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[['ARPP2','ARSP2','market_type']])\n",
    "sm2['s_num']=2\n",
    "sm1=sm1.rename(columns={'ARPP1':'ARPP'})\n",
    "sm2=sm2.rename(columns={'ARPP2':'ARPP'})\n",
    "sm1=sm1.rename(columns={'ARSP1':'ARSP'})\n",
    "sm2=sm2.rename(columns={'ARSP2':'ARSP'})\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "sm_2=sm_all[sm_all.market_type=='hybrid']\n",
    "fig,axes=plt.subplots(2,2,figsize=(12,5))\n",
    "sns.boxplot(x = 's_num', y = 'ARPP', data = sm_2,ax=axes[0][0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.violinplot(x = 's_num', y = 'ARPP', data = sm_2,ax=axes[0][1])\n",
    "sns.boxplot(x = 's_num', y = 'ARSP', data = sm_2,ax=axes[1][0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.violinplot(x = 's_num', y = 'ARSP', data = sm_2,ax=axes[1][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "79149ce6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TtestResult(statistic=40.49854956922508, pvalue=0.0, df=26729)\n",
      "TtestResult(statistic=33.06691354589958, pvalue=4.846857462056051e-235, df=26729)\n"
     ]
    }
   ],
   "source": [
    "print(ttest_rel(data[data['market_type']=='hybrid']['ARPP1'],data[data['market_type']=='hybrid']['ARPP2']))\n",
    "print(ttest_rel(data[data['market_type']=='hybrid']['ARSP1'],data[data['market_type']=='hybrid']['ARSP2']))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a82d2a0",
   "metadata": {},
   "source": [
    "### 跨市场比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9710cdb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ARPP的方差齐性检验结果为 LeveneResult(statistic=10.485733072545555, pvalue=0.001203525931993176)\n",
      "  Source  ddof1         ddof2          F         p-unc      np2\n",
      "0  s_num      1  48922.272183  77.984911  1.071895e-18  0.00105\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se         T            df          pval    hedges\n",
      "0  0  1  0.563918  0.549181  0.014737  0.001669  8.830907  48922.272183  3.778200e-12  0.068898\n",
      "ARPP的方差齐性检验结果为 LeveneResult(statistic=107.32161765623754, pvalue=3.9440599641009145e-25)\n",
      "  Source  ddof1        ddof2           F         p-unc       np2\n",
      "0  s_num      1  47828.70286  153.571172  3.255085e-35  0.002231\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se          T           df  pval    hedges\n",
      "0  1  2  0.443014  0.417458  0.025555  0.002062  12.392384  47828.70286   0.0  0.099359\n"
     ]
    }
   ],
   "source": [
    "cross_market_compare('ARPP')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1ced8a3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ARSP的方差齐性检验结果为 LeveneResult(statistic=229.85770182119316, pvalue=7.655995996224218e-52)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  46751.533183  110.396562  8.571834e-26  0.001539\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff       se          T            df  pval    hedges\n",
      "0  0  1  0.241688  0.257549 -0.015862  0.00151 -10.506977  46751.533183   0.0 -0.083408\n",
      "ARSP的方差齐性检验结果为 LeveneResult(statistic=230.93465536291413, pvalue=4.502734150424549e-52)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  53439.107313  218.924155  1.945594e-49  0.002937\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se          T            df          pval    hedges\n",
      "0  1  2  0.184787  0.205555 -0.020768  0.001404 -14.796086  53439.107313  3.315903e-11 -0.114053\n"
     ]
    }
   ],
   "source": [
    "cross_market_compare('ARSP')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b08ec9bf",
   "metadata": {},
   "source": [
    "### 不同市场下，消费者总满意度和消费者总剩余的差异"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "af602ea9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='market_type', ylabel='消费者总剩余'>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fig,axes=plt.subplots(1,2,figsize=(8,4),sharey=True)\n",
    "sns.boxplot(x = 'market_type', y = '消费者总满意度', data = data,ax=axes[0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.boxplot(x = 'market_type', y = '消费者总剩余', data = data,ax=axes[1], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f73f77c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='market_type', ylabel='消费者总剩余'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "sns.boxplot(x = 'market_type', y = '消费者总剩余', data = data, showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38facd86",
   "metadata": {},
   "source": [
    "### 混合市场下，两个提供方消费者剩余的比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9ef1e9c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='s_num', ylabel='消费者剩余'>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#方差分析\n",
    "sm1=pd.DataFrame(data[['消费者剩余1','market_type']])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[['消费者剩余2','market_type']])\n",
    "sm2['s_num']=2\n",
    "sm1=sm1.rename(columns={'消费者剩余1':'消费者剩余'})\n",
    "sm2=sm2.rename(columns={'消费者剩余2':'消费者剩余'})\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "fig,axes=plt.subplots(1,2,figsize=(8,3),sharey=True)\n",
    "sns.boxplot(x = 's_num', y = '消费者剩余', data = sm_all[sm_all.market_type=='hybrid'],ax=axes[0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.violinplot(x = 's_num', y = '消费者剩余', data = sm_all[sm_all.market_type=='hybrid'],ax=axes[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d5c5e8d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "消费者剩余的方差齐性检验结果为 LeveneResult(statistic=152642.03388612586, pvalue=0.0)\n",
      "  Source  ddof1         ddof2             F  p-unc       np2\n",
      "0  s_num      1  106859.13938  80235.469785    0.0  0.310469\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)       diff        se           T            df  pval    hedges\n",
      "0  1  2  16.557004  59.750199 -43.193195  0.152487 -283.258662  106859.13938   0.0 -1.342015\n",
      "TtestResult(statistic=-284.6428367498738, pvalue=0.0, df=89099)\n",
      "                 T    dof alternative  p-val            CI95%   cohen-d BF10  power\n",
      "T-test -284.642837  89099   two-sided    0.0  [-43.49, -42.9]  1.342021  inf    1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\D\\anaconda\\Lib\\site-packages\\pingouin\\bayesian.py:152: RuntimeWarning: divide by zero encountered in scalar divide\n",
      "  bf10 = 1 / ((1 + t**2 / df) ** (-(df + 1) / 2) / integr)\n"
     ]
    }
   ],
   "source": [
    "column='消费者剩余'\n",
    "anova_h(column,sm_all)\n",
    "print(ttest_rel(data[data['market_type']=='hybrid']['消费者剩余1'],data[data['market_type']=='hybrid']['消费者剩余2']))\n",
    "print(pg.ttest(data[data['market_type']=='hybrid']['消费者剩余1'],data[data['market_type']=='hybrid']['消费者剩余2'], paired=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eece1381",
   "metadata": {},
   "source": [
    "### 跨市场比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d7009af0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "消费者剩余的方差齐性检验结果为 LeveneResult(statistic=83.97142073629857, pvalue=5.14296260883047e-20)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  50145.119778  185.864786  3.022909e-42  0.002454\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)    diff       se          T            df          pval    hedges\n",
      "0  0  1  8.106049  9.475649 -1.3696  0.10046 -13.633224  50145.119778  1.649403e-11 -0.105378\n",
      "消费者剩余的方差齐性检验结果为 LeveneResult(statistic=254.1942443449269, pvalue=3.974606301204854e-57)\n",
      "  Source  ddof1         ddof2          F         p-unc       np2\n",
      "0  s_num      1  46679.258035  150.66808  1.400621e-34  0.002227\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)      diff      se          T            df  pval    hedges\n",
      "0  1  2  45.378597  49.348229 -3.969632  0.3234 -12.274693  46679.258035   0.0 -0.099273\n"
     ]
    }
   ],
   "source": [
    "cross_market_compare('消费者剩余')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3115600d",
   "metadata": {},
   "source": [
    "### 不同市场下，提供方房间毛利率与净利率的差异"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "18268961",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='market_type', ylabel='平均净利率'>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fig,axes=plt.subplots(1,2,figsize=(8,4),sharey=True)\n",
    "sns.boxplot(x = 'market_type', y = '平均毛利率', data = data,ax=axes[0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.boxplot(x = 'market_type', y = '平均净利率', data = data,ax=axes[1], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "33f2e365",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "平均毛利率的方差齐性检验结果为 LeveneResult(statistic=104.32370033451555, pvalue=2.290286978178935e-44)\n",
      "        Source  ddof1       ddof2            F  p-unc       np2\n",
      "0  market_type      2  1776.28078  3246.963482    0.0  0.697879\n",
      "多重比较：\n",
      "     A    B  mean(A)   mean(B)      diff        se          T           df          pval    hedges\n",
      "0  0.0  1.0  0.32079  0.283450  0.037340  0.001889  19.769135  1703.266281  0.000000e+00  0.931537\n",
      "1  0.0  2.0  0.32079  0.174094  0.146696  0.001842  79.636773  1731.109662  1.635359e-13  3.752547\n",
      "2  1.0  2.0  0.28345  0.174094  0.109356  0.002058  53.142145  1794.956968  0.000000e+00  2.504100\n"
     ]
    }
   ],
   "source": [
    "column='平均毛利率'\n",
    "anova_d(column,data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3c58423f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "平均净利率的方差齐性检验结果为 LeveneResult(statistic=29.69127209832442, pvalue=1.758542153128032e-13)\n",
      "        Source  ddof1        ddof2            F  p-unc      np2\n",
      "0  market_type      2  1773.166377  4755.687204    0.0  0.74763\n",
      "多重比较：\n",
      "     A    B   mean(A)   mean(B)      diff        se          T           df          pval    hedges\n",
      "0  0.0  1.0  0.234854  0.198227  0.036627  0.001728  21.190615  1772.543398  0.000000e+00  0.998518\n",
      "1  0.0  2.0  0.234854  0.095284  0.139570  0.001503  92.847985  1751.089657  0.000000e+00  4.375070\n",
      "2  1.0  2.0  0.198227  0.095284  0.102943  0.001618  63.626960  1668.960312  6.357137e-13  2.998152\n"
     ]
    }
   ],
   "source": [
    "column='平均净利率'\n",
    "anova_d(column,data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03dc1da9",
   "metadata": {},
   "source": [
    "### 混合市场下，两个提供方房间平均毛利率与净利率的比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2ad8fe93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='s_num', ylabel='平均净利率'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sm1=pd.DataFrame(data[['毛利率1','净利率1','market_type']])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[['毛利率2','净利率2','market_type']])\n",
    "sm2['s_num']=2\n",
    "sm1=sm1.rename(columns={'毛利率1':'平均毛利率'})\n",
    "sm2=sm2.rename(columns={'毛利率2':'平均毛利率'})\n",
    "sm1=sm1.rename(columns={'净利率1':'平均净利率'})\n",
    "sm2=sm2.rename(columns={'净利率2':'平均净利率'})\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "sm_2=sm_all[sm_all.market_type=='hybrid']\n",
    "fig,axes=plt.subplots(2,2,figsize=(12,5))\n",
    "sns.boxplot(x = 's_num', y = '平均毛利率', data = sm_2,ax=axes[0][0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.violinplot(x = 's_num', y = '平均毛利率', data = sm_2,ax=axes[0][1])\n",
    "sns.boxplot(x = 's_num', y = '平均净利率', data = sm_2,ax=axes[1][0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "sns.violinplot(x = 's_num', y = '平均净利率', data = sm_2,ax=axes[1][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "af5fdc90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "平均毛利率的方差齐性检验结果为 LeveneResult(statistic=89.26234102369405, pvalue=1.0352622994500837e-20)\n",
      "  Source  ddof1        ddof2          F          p-unc       np2\n",
      "0  s_num      1  1576.044177  566.55979  3.089546e-107  0.239605\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se          T           df  pval    hedges\n",
      "0  1  2  0.253327  0.313573 -0.060246  0.002531 -23.802516  1576.044177   0.0 -1.121593\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "平均净利率的方差齐性检验结果为 LeveneResult(statistic=84.87341524733047, pvalue=8.595661460894557e-20)\n",
      "  Source  ddof1        ddof2           F         p-unc       np2\n",
      "0  s_num      1  1561.241165  464.782319  1.894851e-90  0.205403\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se          T           df  pval    hedges\n",
      "0  1  2  0.175193  0.221262 -0.046069  0.002137 -21.558811  1561.241165   0.0 -1.015868\n"
     ]
    }
   ],
   "source": [
    "column='平均毛利率'\n",
    "anova_h(column,sm_all)\n",
    "print('\\n'*3)\n",
    "column='平均净利率'\n",
    "anova_h(column,sm_all)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0efa8cfc",
   "metadata": {},
   "source": [
    "### 跨市场比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a96aecf4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "毛利率的方差齐性检验结果为 LeveneResult(statistic=628.4335783871683, pvalue=4.1165454355852394e-138)\n",
      "  Source  ddof1         ddof2            F  p-unc       np2\n",
      "0  s_num      1  67506.652231  1625.374208    0.0  0.016714\n",
      "多重比较：\n",
      "   A  B  mean(A)   mean(B)      diff        se         T            df  pval    hedges\n",
      "0  0  1  0.32223  0.291632  0.030598  0.000759  40.31593  67506.652231   0.0  0.277007\n",
      "毛利率的方差齐性检验结果为 LeveneResult(statistic=1625.4817011881964, pvalue=0.0)\n",
      "  Source  ddof1         ddof2            F          p-unc       np2\n",
      "0  s_num      1  39329.384276  1246.931276  6.258357e-269  0.020539\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se          T            df  pval    hedges\n",
      "0  1  2  0.258227  0.211904  0.046323  0.001312  35.311914  39329.384276   0.0  0.304302\n"
     ]
    }
   ],
   "source": [
    "cross_market_compare('毛利率')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "605ba0b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "净利率的方差齐性检验结果为 LeveneResult(statistic=689.8965276119242, pvalue=2.318609092326677e-151)\n",
      "  Source  ddof1         ddof2            F  p-unc       np2\n",
      "0  s_num      1  66594.251603  1691.579467    0.0  0.017603\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff       se          T            df          pval   hedges\n",
      "0  0  1  0.237643  0.209255  0.028388  0.00069  41.128816  66594.251603  2.747047e-11  0.28441\n",
      "净利率的方差齐性检验结果为 LeveneResult(statistic=1721.0940104267672, pvalue=0.0)\n",
      "  Source  ddof1         ddof2            F          p-unc       np2\n",
      "0  s_num      1  38900.471323  1484.623753  8.742689e-319  0.024563\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)     diff        se          T            df  pval    hedges\n",
      "0  1  2  0.191775  0.149285  0.04249  0.001103  38.530816  38900.471323   0.0  0.333461\n"
     ]
    }
   ],
   "source": [
    "cross_market_compare('净利率')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b7a4254",
   "metadata": {},
   "source": [
    "### 不同市场下各利益相关者收益的比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a0a1c13c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "columns=['社会总福利','平台收益','提供方总收益','消费者总收益']\n",
    "fig,axes=plt.subplots(4,2,figsize=(10,20))\n",
    "for i,column in zip(range(4),columns):\n",
    "    sns.boxplot(x = 'market_type', y = column, data = data,ax=axes[i][0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "    sns.violinplot(x = 'market_type', y = column, data = data,ax=axes[i][1])\n",
    "#fig.savefig('1.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "986a52da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "社会总福利的方差齐性检验结果为 LeveneResult(statistic=8772.784260875307, pvalue=0.0)\n",
      "        Source  ddof1          ddof2            F  p-unc       np2\n",
      "0  market_type      2  228595.892523  4830.222271    0.0  0.019996\n",
      "多重比较：\n",
      "               A              B    mean(A)     mean(B)       diff        se          T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  232.07342  240.030860  -7.957440  0.155451 -51.189279  149665.071665   0.0 -0.224775\n",
      "1         hybrid    pure-egoism  232.07342  227.732975   4.340445  0.169594  25.593199  191032.537765   0.0  0.102322\n",
      "2  pure-altruism    pure-egoism  240.03086  227.732975  12.297885  0.128914  95.396248  331067.036040   0.0  0.319589\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "平台收益的方差齐性检验结果为 LeveneResult(statistic=1343.6665185586498, pvalue=0.0)\n",
      "        Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  market_type      2  238121.721811  20113.335661    0.0  0.083347\n",
      "多重比较：\n",
      "               A              B    mean(A)    mean(B)       diff        se           T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  53.479213  47.248647   6.230566  0.079418   78.453268  172964.290600   0.0  0.325531\n",
      "1         hybrid    pure-egoism  53.479213  60.604379  -7.125166  0.082000  -86.892256  188098.332422   0.0 -0.349402\n",
      "2  pure-altruism    pure-egoism  47.248647  60.604379 -13.355733  0.066595 -200.551129  353276.850608   0.0 -0.671870\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "提供方总收益的方差齐性检验结果为 LeveneResult(statistic=5735.06007586351, pvalue=0.0)\n",
      "        Source  ddof1          ddof2              F  p-unc       np2\n",
      "0  market_type      2  226952.399611  158520.958959    0.0  0.405869\n",
      "多重比较：\n",
      "               A              B     mean(A)     mean(B)       diff        se           T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  110.105657   77.942682  32.162974  0.148825  216.113379  185448.234660   0.0  0.873613\n",
      "1         hybrid    pure-egoism  110.105657  140.223186 -30.117529  0.137279 -219.389704  146983.022623   0.0 -0.970531\n",
      "2  pure-altruism    pure-egoism   77.942682  140.223186 -62.280504  0.111155 -560.303417  332622.265843   0.0 -1.877083\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "消费者总收益的方差齐性检验结果为 LeveneResult(statistic=56671.08947545214, pvalue=0.0)\n",
      "        Source  ddof1          ddof2              F  p-unc       np2\n",
      "0  market_type      2  194667.050859  261787.814431    0.0  0.501141\n",
      "多重比较：\n",
      "               A              B     mean(A)     mean(B)       diff        se           T             df  pval    hedges\n",
      "0         hybrid  pure-altruism   68.488550  114.839531 -46.350981  0.192653 -240.592551  182460.499036   0.0 -0.978472\n",
      "1         hybrid    pure-egoism   68.488550   26.905410  41.583141  0.164388  252.957338  109483.458105   0.0  1.286313\n",
      "2  pure-altruism    pure-egoism  114.839531   26.905410  87.934121  0.124637  705.521350  250623.260139   0.0  2.363580\n",
      "\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "columns=['社会总福利','平台收益','提供方总收益','消费者总收益']\n",
    "for column in columns:\n",
    "    anova_d(column,data)\n",
    "    print('\\n'*3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ba89c0fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "提供方收益1的方差齐性检验结果为 LeveneResult(statistic=1977.7019232491386, pvalue=0.0)\n",
      "        Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  market_type      2  241719.728201  77988.648895    0.0  0.243508\n",
      "多重比较：\n",
      "               A              B    mean(A)    mean(B)       diff        se           T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  71.421254  38.971341  32.449913  0.102863  315.467361  174795.613529   0.0  1.303791\n",
      "1         hybrid    pure-egoism  71.421254  70.111593   1.309661  0.111269   11.770210  210595.012921   0.0  0.045369\n",
      "2  pure-altruism    pure-egoism  38.971341  70.111593 -31.140252  0.093010 -334.805681  341608.035408   0.0 -1.121639\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "提供方收益2的方差齐性检验结果为 LeveneResult(statistic=2029.722909986046, pvalue=0.0)\n",
      "        Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  market_type      2  233573.343675  63356.496353    0.0  0.232318\n",
      "多重比较：\n",
      "               A              B    mean(A)    mean(B)       diff        se           T             df      pval    hedges\n",
      "0         hybrid  pure-altruism  38.684403  38.971341  -0.286938  0.110663   -2.592891  159693.036525  0.025771 -0.011094\n",
      "1         hybrid    pure-egoism  38.684403  70.111593 -31.427190  0.118518 -265.168914  192203.772309  0.000000 -1.057747\n",
      "2  pure-altruism    pure-egoism  38.971341  70.111593 -31.140252  0.093010 -334.805681  341608.035408  0.000000 -1.121639\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "消费者平均收益1的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "        Source  ddof1          ddof2              F  p-unc       np2\n",
      "0  market_type      2  235634.832552  130312.156672    0.0  0.423482\n",
      "多重比较：\n",
      "               A              B   mean(A)   mean(B)      diff        se           T             df  pval    hedges\n",
      "0         hybrid  pure-altruism  0.134286  0.445504 -0.311218  0.000734 -424.244221  264216.010879   0.0 -1.457266\n",
      "1         hybrid    pure-egoism  0.134286  0.122169  0.012116  0.000537   22.548112  163296.444609   0.0  0.095858\n",
      "2  pure-altruism    pure-egoism  0.445504  0.122169  0.323335  0.000646  500.278010  262097.204927   0.0  1.677050\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "消费者平均收益2的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "        Source  ddof1          ddof2              F  p-unc       np2\n",
      "0  market_type      2  191547.359525  159919.647702    0.0  0.356433\n",
      "多重比较：\n",
      "               A              B   mean(A)   mean(B)      diff        se           T             df     pval    hedges\n",
      "0         hybrid  pure-altruism  0.443980  0.445504 -0.001525  0.001102   -1.384288  155945.850389  0.34913 -0.005969\n",
      "1         hybrid    pure-egoism  0.443980  0.122169  0.321810  0.000982  327.770504  104936.152512  0.00000  1.705918\n",
      "2  pure-altruism    pure-egoism  0.445504  0.122169  0.323335  0.000646  500.278010  262097.204927  0.00000  1.677050\n",
      "\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "columns=['提供方收益1','提供方收益2','消费者平均收益1','消费者平均收益2']\n",
    "for column in columns:\n",
    "    anova_d(column,data)\n",
    "    print('\\n'*3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53a6f3fd",
   "metadata": {},
   "source": [
    "### 混合市场下各方收益的比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "3874c2c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TtestResult(statistic=246.52969816049685, pvalue=0.0, df=89099)\n",
      "                 T    dof alternative  p-val          CI95%   cohen-d BF10  power\n",
      "T-test  246.529698  89099   two-sided    0.0  [32.48, 33.0]  1.227083  inf    1.0\n",
      "TtestResult(statistic=-268.4441524370032, pvalue=0.0, df=89099)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\D\\anaconda\\Lib\\site-packages\\pingouin\\bayesian.py:152: RuntimeWarning: divide by zero encountered in scalar divide\n",
      "  bf10 = 1 / ((1 + t**2 / df) ** (-(df + 1) / 2) / integr)\n",
      "C:\\D\\anaconda\\Lib\\site-packages\\pingouin\\bayesian.py:152: RuntimeWarning: divide by zero encountered in scalar divide\n",
      "  bf10 = 1 / ((1 + t**2 / df) ** (-(df + 1) / 2) / integr)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 T    dof alternative  p-val            CI95%   cohen-d BF10  power\n",
      "T-test -268.444152  89099   two-sided    0.0  [-38.1, -37.55]  1.206056  inf    1.0\n",
      "TtestResult(statistic=nan, pvalue=nan, df=nan)\n",
      "                 T    dof alternative  p-val           CI95%   cohen-d BF10  power\n",
      "T-test -313.756234  87681   two-sided    0.0  [-0.31, -0.31]  1.412622  inf    1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\D\\anaconda\\Lib\\site-packages\\pingouin\\bayesian.py:152: RuntimeWarning: divide by zero encountered in scalar divide\n",
      "  bf10 = 1 / ((1 + t**2 / df) ** (-(df + 1) / 2) / integr)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "提供方收益的方差齐性检验结果为 LeveneResult(statistic=4935.679657584856, pvalue=0.0)\n",
      "  Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  s_num      1  176281.984375  67080.391966    0.0  0.273487\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)       diff        se           T             df  pval    hedges\n",
      "0  1  2  71.421254  38.684403  32.736851  0.126398  258.998826  176281.984375   0.0  1.227078\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "消费者收益的方差齐性检验结果为 LeveneResult(statistic=70682.30326347938, pvalue=0.0)\n",
      "  Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  s_num      1  112832.106741  64801.094029    0.0  0.266672\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)       diff        se          T             df  pval   hedges\n",
      "0  1  2  15.332299  53.156252 -37.823953  0.148585 -254.56059  112832.106741   0.0 -1.20605\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "消费者平均收益的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "  Source  ddof1          ddof2             F  p-unc       np2\n",
      "0  s_num      1  126638.874661  88446.306074    0.0  0.335282\n",
      "多重比较：\n",
      "   A  B   mean(A)  mean(B)      diff        se           T             df  pval    hedges\n",
      "0  1  2  0.134286  0.44398 -0.309694  0.001041 -297.399237  126638.874661   0.0 -1.420435\n",
      "\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "columns=[ '提供方收益','消费者收益','消费者平均收益']\n",
    "columns1=['提供方收益1','消费者收益1','消费者平均收益1','market_type']\n",
    "columns2=['提供方收益2','消费者收益2','消费者平均收益2','market_type']\n",
    "\n",
    "sm1=pd.DataFrame(data[columns1])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[columns2])\n",
    "sm2['s_num']=2\n",
    "for c,c1,c2 in zip(columns,columns1,columns2):\n",
    "    sm1=sm1.rename(columns={c1:c})\n",
    "    sm2=sm2.rename(columns={c2:c})\n",
    "    #两配对样本t检验\n",
    "    print(ttest_rel(data[data['market_type']=='hybrid'][c1],data[data['market_type']=='hybrid'][c2]))\n",
    "    print(pg.ttest(data[data['market_type']=='hybrid'][c1],data[data['market_type']=='hybrid'][c2], paired=True))\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "sm_2=sm_all[sm_all.market_type=='hybrid']\n",
    "fig,axes=plt.subplots(3,2,figsize=(10,5))\n",
    "for i,c in enumerate(columns):\n",
    "    sns.boxplot(x = 's_num', y = c, data = sm_2,ax=axes[i][0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "    sns.violinplot(x = 's_num', y = c, data = sm_2,ax=axes[i][1])\n",
    "for column in columns:\n",
    "    anova_h(column,sm_2)\n",
    "    print('\\n'*3)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc214513",
   "metadata": {},
   "source": [
    "### 跨平台比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b9e1076c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "提供方收益的方差齐性检验结果为 LeveneResult(statistic=724.5470198561105, pvalue=7.967449198292006e-159)\n",
      "  Source  ddof1         ddof2          F         p-unc       np2\n",
      "0  s_num      1  58280.218278  46.123243  1.121046e-11  0.000545\n",
      "多重比较：\n",
      "   A  B   mean(A)    mean(B)      diff        se         T            df          pval    hedges\n",
      "0  0  1  70.06044  71.492385 -1.431945  0.210846 -6.791409  58280.218278  3.409117e-11 -0.049608\n",
      "提供方收益的方差齐性检验结果为 LeveneResult(statistic=1448.578991899516, pvalue=8.551599686e-314)\n",
      "  Source  ddof1         ddof2         F     p-unc       np2\n",
      "0  s_num      1  44756.229385  0.542503  0.461401  0.000008\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)      diff        se         T            df      pval    hedges\n",
      "0  1  2  38.958029  39.114425 -0.156396  0.212336 -0.736548  44756.229385  0.461401 -0.006048\n",
      "消费者收益的方差齐性检验结果为 LeveneResult(statistic=63.188595984803335, pvalue=1.9044905715450293e-15)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  49228.059008  254.809266  3.234758e-57  0.003408\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)      diff        se          T            df          pval    hedges\n",
      "0  0  1  13.402663  15.294844 -1.892181  0.118537 -15.962746  49228.059008  6.385004e-12 -0.124247\n",
      "消费者收益的方差齐性检验结果为 LeveneResult(statistic=493.8359492827845, pvalue=4.913032077187779e-109)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  45846.699231  178.170152  1.448052e-40  0.002666\n",
      "多重比较：\n",
      "   A  B   mean(A)    mean(B)      diff        se          T            df  pval    hedges\n",
      "0  1  2  52.93972  57.156613 -4.216893  0.315919 -13.348039  45846.699231   0.0 -0.108652\n",
      "消费者平均收益的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  45506.740545  137.995195  8.121517e-32  0.001979\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se          T            df  pval    hedges\n",
      "0  0  1  0.121783  0.133727 -0.011943  0.001017 -11.747136  45506.740545   0.0 -0.094464\n",
      "消费者平均收益的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "  Source  ddof1         ddof2         F     p-unc       np2\n",
      "0  s_num      1  43808.817862  0.296195  0.586281  0.000005\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se         T            df      pval    hedges\n",
      "0  1  2  0.442677  0.443819 -0.001142  0.002099 -0.544238  43808.817862  0.586281 -0.004499\n"
     ]
    }
   ],
   "source": [
    "columns=['提供方收益','消费者收益','消费者平均收益']\n",
    "for column_str in columns:\n",
    "    cross_market_compare(column_str)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c433c45",
   "metadata": {},
   "source": [
    "### 不同市场下其他指标的比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b2308398",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('获得激励评论数量占评论比例1', '获得激励评论数量占评论比例2', '获得激励评论数量占评论比例')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'服务人数1', '服务人数2', '总服务人数', '实际到达人数', '办理入住数1', '办理入住数2', '办理入住总数',\n",
    "'被激励好评数量1', '被激励好评数量2', '获得激励数量1', '获得激励数量2', '好评占比1', '好评占比2', '总好评数量占比', '当期好评占比1', '当期好评占比2',\n",
    "'总评论数量1', '总评论数量2', '总评论数量', '好评数量1', '好评数量2', '好评总数', \n",
    "'被激励好评占好评比例1', '被激励好评占好评比例2', '被激励好评占好评比例',\n",
    "'获得激励评论数量占评论比例1', '获得激励评论数量占评论比例2', '获得激励评论数量占评论比例'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "75a82abe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "columns=['总服务人数','实际到达人数','办理入住总数','总好评数量占比','总评论数量', '好评总数', '被激励好评占好评比例', '获得激励评论数量占评论比例']\n",
    "fig,axes=plt.subplots(8,2,figsize=(10,20))\n",
    "for i,column in zip(range(8),columns):\n",
    "    sns.boxplot(x = 'market_type', y = column, data = data,ax=axes[i][0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "    sns.violinplot(x = 'market_type', y = column, data = data,ax=axes[i][1])\n",
    "#fig.savefig('1.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "bfdfce93",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TtestResult(statistic=11.2228063943589, pvalue=3.29670074353027e-29, df=89099)\n",
      "TtestResult(statistic=10.007895724556082, pvalue=1.4480850059597846e-23, df=89099)\n",
      "TtestResult(statistic=-519.5191620886777, pvalue=0.0, df=89099)\n",
      "TtestResult(statistic=91.76792336591089, pvalue=0.0, df=89099)\n",
      "TtestResult(statistic=14.555365102416749, pvalue=6.130433366376347e-48, df=89099)\n",
      "TtestResult(statistic=nan, pvalue=nan, df=nan)\n",
      "TtestResult(statistic=nan, pvalue=nan, df=nan)\n"
     ]
    }
   ],
   "source": [
    "columns=['总服务人数','办理入住总数','总好评数量占比','总评论数量', '好评总数', '被激励好评占好评比例', '获得激励评论数量占评论比例']\n",
    "columns1=['服务人数1','办理入住数1','好评占比1','总评论数量1', '好评数量1', '被激励好评占好评比例1', '获得激励评论数量占评论比例1','market_type']\n",
    "columns2=['服务人数2','办理入住数2','好评占比2','总评论数量2', '好评数量2', '被激励好评占好评比例2', '获得激励评论数量占评论比例2','market_type']\n",
    "\n",
    "sm1=pd.DataFrame(data[columns1])\n",
    "sm1['s_num']=1\n",
    "sm2=pd.DataFrame(data[columns2])\n",
    "sm2['s_num']=2\n",
    "for c,c1,c2 in zip(columns,columns1,columns2):\n",
    "    sm1=sm1.rename(columns={c1:c})\n",
    "    sm2=sm2.rename(columns={c2:c})\n",
    "    print(ttest_rel(data[data['market_type']=='hybrid'][c1],data[data['market_type']=='hybrid'][c2]))\n",
    "sm_all=pd.concat([sm1,sm2])\n",
    "sm_2=sm_all[sm_all.market_type=='hybrid']\n",
    "fig,axes=plt.subplots(7,2,figsize=(10,20))\n",
    "for i,c in enumerate(columns):\n",
    "    sns.boxplot(x = 's_num', y = c, data = sm_2,ax=axes[i][0], showmeans=True,meanline=True, meanprops = {'linestyle':'--','color':'red'})\n",
    "    sns.violinplot(x = 's_num', y = c, data = sm_2,ax=axes[i][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb9ac141",
   "metadata": {},
   "source": [
    "### 跨市场比较"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8ff23ecc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "服务人数的方差齐性检验结果为 LeveneResult(statistic=1661.1610453405394, pvalue=0.0)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  65952.007091  254.205572  4.023089e-57  0.002709\n",
      "多重比较：\n",
      "   A  B     mean(A)     mean(B)      diff        se          T            df  pval    hedges\n",
      "0  0  1  117.174693  121.975608 -4.800914  0.301114 -15.943826  65952.007091   0.0 -0.110741\n",
      "服务人数的方差齐性检验结果为 LeveneResult(statistic=1218.9682746044732, pvalue=8.129622007484651e-265)\n",
      "  Source  ddof1        ddof2           F         p-unc       np2\n",
      "0  s_num      1  37453.81633  375.641325  2.834169e-83  0.006523\n",
      "多重比较：\n",
      "   A  B     mean(A)     mean(B)      diff        se          T           df  pval    hedges\n",
      "0  1  2  119.183652  126.395403 -7.211751  0.372095 -19.381469  37453.81633   0.0 -0.170271\n",
      "办理入住数的方差齐性检验结果为 LeveneResult(statistic=1704.687561087668, pvalue=0.0)\n",
      "  Source  ddof1         ddof2          F         p-unc       np2\n",
      "0  s_num      1  66373.814766  203.35171  4.535354e-46  0.002156\n",
      "多重比较：\n",
      "   A  B     mean(A)     mean(B)      diff        se          T            df          pval   hedges\n",
      "0  0  1  117.148583  121.962417 -4.813834  0.337573 -14.260144  66373.814766  4.074563e-11 -0.09876\n",
      "办理入住数的方差齐性检验结果为 LeveneResult(statistic=1120.6219396136826, pvalue=8.669233110522139e-244)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  37100.743441  297.660987  1.936484e-66  0.005215\n",
      "多重比较：\n",
      "   A  B     mean(A)     mean(B)      diff        se          T            df          pval   hedges\n",
      "0  1  2  119.148099  126.386837 -7.238739  0.419568 -17.252854  37100.743441  1.101341e-13 -0.15215\n",
      "好评占比的方差齐性检验结果为 LeveneResult(statistic=201.90034575240907, pvalue=9.22828670303823e-46)\n",
      "  Source  ddof1         ddof2         F     p-unc      np2\n",
      "0  s_num      1  52512.159767  17.97389  0.000022  0.00023\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se         T            df      pval    hedges\n",
      "0  0  1  0.801688  0.799011  0.002677  0.000631  4.239563  52512.159767  0.000022  0.032207\n",
      "好评占比的方差齐性检验结果为 LeveneResult(statistic=7.965080483642914, pvalue=0.004770160146191502)\n",
      "  Source  ddof1         ddof2          F         p-unc       np2\n",
      "0  s_num      1  49377.171901  50.278325  1.352006e-12  0.000715\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se         T            df  pval    hedges\n",
      "0  1  2  0.954411  0.952038  0.002373  0.000335  7.090721  49377.171901   0.0  0.056212\n",
      "总评论数量的方差齐性检验结果为 LeveneResult(statistic=1045.359721147705, pvalue=9.509292664179969e-228)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  59683.237663  134.356739  4.928527e-31  0.001557\n",
      "多重比较：\n",
      "   A  B    mean(A)   mean(B)      diff        se          T            df          pval    hedges\n",
      "0  0  1  92.787196  96.19668 -3.409484  0.294143 -11.591235  59683.237663  3.525702e-11 -0.083895\n",
      "总评论数量的方差齐性检验结果为 LeveneResult(statistic=1422.9877798811806, pvalue=2.41491195086095e-308)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  39951.801254  199.460963  3.518053e-45  0.003303\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)     diff        se          T            df  pval    hedges\n",
      "0  1  2  77.857502  81.772792 -3.91529  0.277227 -14.123065  39951.801254   0.0 -0.120971\n",
      "好评数量的方差齐性检验结果为 LeveneResult(statistic=665.8181018329115, pvalue=3.582595636940227e-146)\n",
      "  Source  ddof1         ddof2          F         p-unc      np2\n",
      "0  s_num      1  54271.434404  85.094483  2.943100e-20  0.00106\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)      diff        se         T            df          pval   hedges\n",
      "0  0  1  73.478794  76.583506 -3.104712  0.336566 -9.224667  54271.434404  2.914569e-11 -0.06922\n",
      "好评数量的方差齐性检验结果为 LeveneResult(statistic=1204.619577224337, pvalue=9.465882871883416e-262)\n",
      "  Source  ddof1         ddof2           F         p-unc       np2\n",
      "0  s_num      1  41200.532051  182.173968  1.990333e-41  0.002948\n",
      "多重比较：\n",
      "   A  B    mean(A)    mean(B)      diff        se          T            df  pval    hedges\n",
      "0  1  2  73.921101  77.730695 -3.809594  0.282251 -13.497184  41200.532051   0.0 -0.114264\n",
      "被激励好评占好评比例的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "  Source  ddof1         ddof2          F         p-unc       np2\n",
      "0  s_num      1  47269.135287  92.785554  6.104984e-22  0.001312\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se         T            df  pval    hedges\n",
      "0  0  1  0.659961  0.628588  0.031373  0.003257  9.632526  47269.135287   0.0  0.076786\n",
      "被激励好评占好评比例的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "  Source  ddof1         ddof2         F     p-unc       np2\n",
      "0  s_num      1  47326.386119  21.19681  0.000004  0.000308\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se         T            df      pval    hedges\n",
      "0  1  2  0.453326  0.439677  0.013648  0.002964  4.603999  47326.386119  0.000004  0.037001\n",
      "获得激励评论数量占评论比例的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "  Source  ddof1      ddof2         F     p-unc       np2\n",
      "0  s_num      1  49294.248  2.038841  0.153333  0.000028\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se        T         df      pval    hedges\n",
      "0  0  1  0.831244  0.827691  0.003552  0.002488  1.42788  49294.248  0.153333  0.011139\n",
      "获得激励评论数量占评论比例的方差齐性检验结果为 LeveneResult(statistic=nan, pvalue=nan)\n",
      "  Source  ddof1         ddof2         F     p-unc       np2\n",
      "0  s_num      1  48100.060867  0.465004  0.495298  0.000007\n",
      "多重比较：\n",
      "   A  B   mean(A)   mean(B)      diff        se         T            df      pval    hedges\n",
      "0  1  2  0.959388  0.958511  0.000877  0.001285  0.681912  48100.060867  0.495298  0.005448\n"
     ]
    }
   ],
   "source": [
    "columns=['服务人数','办理入住数','好评占比','总评论数量', '好评数量', '被激励好评占好评比例', '获得激励评论数量占评论比例']\n",
    "for column_str in columns:\n",
    "    cross_market_compare(column_str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "923d8442",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
